// Firestore security rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() {
      return request.auth != null;
    }

    function roleOf(uid) {
      return get(/databases/$(database)/documents/profiles/$(uid)).data.role;
    }

    function isDirector() {
      return signedIn() && roleOf(request.auth.uid) == "director";
    }

    function isChief() {
      return signedIn() && roleOf(request.auth.uid) == "chief";
    }

    function isStaff() {
      let r = roleOf(request.auth.uid);
      return signedIn() && (r == "director" || r == "chief" || r == "senior" || r == "agent");
    }

    function vehicleFolderProtectedFieldsUnchanged() {
      return request.resource.data.createdBy == resource.data.createdBy &&
        request.resource.data.createdByUid == resource.data.createdByUid &&
        request.resource.data.createdAt == resource.data.createdAt;
    }

    function vehicleNotePaymentOnlyUpdate() {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly([
        "paymentStatus",
        "paymentStatusMessage",
        "paymentResolvedAt",
        "paymentResolvedBy",
        "paymentResolvedByUid",
        "paymentCredited"
      ]);
    }

    function isCriminalGroupContext() {
      return (resource.data.category == "criminal-group") ||
        (request.resource.data.category == "criminal-group");
    }

    function isCriminalGroupDossier(dossierId) {
      return get(/databases/$(database)/documents/dossiers/$(dossierId)).data.category == "criminal-group";
    }

    // profile
    match /profiles/{uid} {
      allow read: if signedIn();
      allow create: if signedIn() && uid == request.auth.uid;
      allow update: if (isDirector() || isChief()) || (signedIn() && uid == request.auth.uid);
      allow delete: if isDirector() || isChief();

      match /counters/{counterId} {
        allow read, write: if isDirector();
      }
    }

    // presence (heartbeat)
    match /presence/{uid} {
      allow read: if signedIn() && (uid == request.auth.uid || isStaff());
      allow create, update: if signedIn() && uid == request.auth.uid;
      allow delete: if isDirector() || isChief();
    }

    // konto główne (dla kompatybilności z panelem)
    match /accounts/{docId} {
      allow read, write: if isDirector();
    }

    // archiwum dokumentów
    match /archives/{id} {
      allow create: if signedIn();
      allow read:   if isStaff();
      allow update: if isDirector() || isChief();
      allow delete: if isDirector();
    }

    // teczki + wpisy
    match /dossiers/{dossierId} {
      allow read: if signedIn();
      allow create: if signedIn();
      allow update: if (isDirector() || isChief()) ||
        (signedIn() && resource.data.createdByUid == request.auth.uid) ||
        (isStaff() && isCriminalGroupContext());
      allow delete: if isDirector();

      match /records/{recordId} {
        allow read: if signedIn();
        allow create: if signedIn();
        allow update, delete: if (isDirector() || isChief()) ||
          (signedIn() && resource.data.authorUid == request.auth.uid) ||
          (isStaff() && isCriminalGroupDossier(dossierId));
      }
    }

    // *** NOWE: zarządzanie teczkami pojazdów ***
    match /vehicleFolders/{vehicleId} {
      allow read: if isStaff();
      allow create: if isStaff();
      allow update: if (isDirector() || isChief()) ||
        (isStaff() && vehicleFolderProtectedFieldsUnchanged());
      allow delete: if (isDirector() || isChief()) ||
        (signedIn() && request.auth.uid == resource.data.createdByUid);

      match /notes/{noteId} {
        allow read, create: if isStaff();
        allow update: if (isDirector() || isChief()) ||
          (signedIn() && request.auth.uid == resource.data.authorUid) ||
          (isStaff() && vehicleNotePaymentOnlyUpdate());
        allow delete: if (isDirector() || isChief()) ||
          (signedIn() && request.auth.uid == resource.data.authorUid);
      }
    }
    // *** KONIEC BLOKU vehicleFolders ***

    // logi
    match /logs/{logId} {
      allow create: if signedIn();
      allow read:   if isDirector() || isChief();
    }

    // finanse (starszy namespace) + podkolekcja accounts
    match /finance/{docId} {
      allow read, write: if isDirector();

      match /accounts/{accountId} {
        allow read, write: if isDirector();
      }
    }

    // konfiguracje
    match /configs/{configId} {
      allow read: if signedIn();
      allow write: if isDirector();
    }

    // domyślnie: pełen dostęp tylko dla Director
    match /{document=**} {
      allow read, write: if isDirector();
    }
  }
}
